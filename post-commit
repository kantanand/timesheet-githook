#!/bin/sh

# Allows us to read user input below, assigns stdin to keyboard
exec < /dev/tty

# Ask for JIRA credentials/url and store the base64 encoded version of what the user enters
parse_jira_data() {
  echo "Please enter your JIRA subdomain"
  echo "Example: I would type 'thrillistmediagroup' because my JIRA url is: https://thrillistmediagroup.atlassian.net"
  read jira_url;

  echo "Please enter your jira username (not your email): "; 
  read username;  
  
  echo "Please enter your jira password";
  stty -echo
  read password;
  stty echo

  jira_credentials=$(printf "$username":"$password" | base64)
  old_umask=`umask`
  umask 0077
  echo "$jira_credentials" > "$jira_credentials_file"
  echo "$jira_url" > "$jira_url_file"
  umask $old_umask
}

# Parse the git branch
parse_git_branch() {
  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}

# Parse the parameter for a JIRA ticket
parse_jira_ticket() {
  echo $1 | grep -e '[A-Za-z]\+-[0-9]\+' -o
}

# function for checking the existance of jira credentials
check_jira_data() {
  # If the user does not have jira credentials and jira ul stored, we'll need to ask them to enter credentials and url
  if [ -e "$jira_credentials_file" ] && [ -e "$jira_url_file" ]; then
    jira_credentials=$(cat "$jira_credentials_file")
    jira_url=$(cat "$jira_url_file")
  else
    parse_jira_data
  fi
}

# Sum the total amount of time logged today by the user so we can display it later
get_total_time() {
  # Decode  the base64 encoded username:password
  usernamepassword=$(echo "$1" | openssl enc -d -base64)
  # Keep only the username (needed to for running some queries in JIRA)
  username=${usernamepassword%:*}
  # Export these variables so that they can be used in the ruby file
  export JIRA_CREDENTIALS=$1
  export JIRA_URL=$2
  export USERNAME=$username
  # Use a ruby script to query JIRA for all the time that this user has already logged today
  total_time=$(ruby `git rev-parse --git-dir`/hooks/timesheet-githook/sum_time.rb)

  if [ "$total_time" = "unauthorized" ]; then
    exit
  else
    echo "$total_time"
  fi
}

log_time() {
  echo "[post-commit hook] Total Time Logged Today: $total_time"
  read -p "[post-commit hook] How long did that take to do? " time
  if [ "$time" = "" ]; then
    exit
  else
    response=$(eval curl "-D- --write-out %{http_code} --silent --output /dev/null -X POST -d '{\"timeSpent\":\"$time\",\"comment\":\"$commit_message\"}' -H 'Authorization: Basic $1' -H 'Content-Type: application/json' $jira_url/rest/api/2/issue/\"$2\"/worklog")
    if [[ $response =~ "201 Created" ]]; then
      echo "[post-commit hook] $time successfully logged to $ticket!"
    elif [[ $response =~ "401 Unauthorized" ]]; then
      read -p "[post-commit hook] $time was not logged successfully to $ticket. If you have updated your credentials in JIRA, press 'u' to update them here so that this hook works on your next commit. Otherwise, hit enter to ignore. " option
      if [[ $option == "u" ]]; then
        parse_jira_data
      else
        exit
      fi
    elif [[ $response =~ "400 Bad Request" ]]; then
      read -p "[post-commit hook] $time was not logged successfully to $ticket. Check the format of your time. Try again? (y/n) " option
      if [ $option == "y" ] || [ $option == "Y" ]; then
        log_time $1 $2
      else
        exit
      fi
    else
      read -p "[post-commit hook] $time was not logged successfully to $ticket for an unknown reason. Try again? (y/n) " option
      if [ $option == "y" ] || [ $option == "Y" ]; then
        log_time $1 $2
      else
        exit
      fi
    fi
    exit
  fi
}

# Read JIRA credentials if they exist
jira_credentials_file="`git rev-parse --git-dir`/hooks/timesheet-githook/jira_credentials.txt"

# Get the branch name
git_branch=`parse_git_branch`

# skip hook if this commit is a merge
# http://stackoverflow.com/a/3824122
num_git_parents=$(git cat-file -p HEAD | grep -E "parent [a-zA-Z0-9]{40,}" -c)
if [[ $num_git_parents -gt 1 ]]
then
  exit
fi

# Find out if this is a smart commit (e.g. git commit -m "JQWE-123 #time 1h #comment fixed it" will log 1 hour already)
commit_message=$(git log -1 HEAD --pretty=%B)
if [[ "$commit_message" == *"#time"* ]]; then
  is_smart_commit=true
else
  is_smart_commit=false
fi

# Check for a ticket in the branch name
ticket_in_branch=`parse_jira_ticket $git_branch`

# If the user explicitly mentioned a ticket in their commit message, that ticket trumps the git branch name ticket
ticket_in_commit_message=`parse_jira_ticket $commit_message`

if [ "$ticket_in_commit_message" != "" ]; then
  ticket=$ticket_in_commit_message
else
  ticket=$ticket_in_branch
fi

# check that the jira credentials file and url exists
check_jira_data

# The total amount of time logged by the user today
total_time=`get_total_time $jira_credentials $jira_url`

# If the branch has a ticket number and the commit is not a smart commit, prompt the user for time logging
if [ "$ticket" != "" ] && [ "$is_smart_commit" = false ]; then
  log_time $jira_credentials $ticket $total_time
else
  exit
fi
